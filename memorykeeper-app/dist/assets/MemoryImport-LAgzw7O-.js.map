{"version":3,"mappings":"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","names":["importMemoriesFromFiles","files","userId","options","result","normalizedOptions","i","batch","file","processFile","error","fileData","memories","extractMemoriesFromFile","memoryData","sanitizedData","sanitizeMemoryData","memory","dbResult","addMemory","getActivityPoints","__vitePreload","n","addActivityAndRecalculate","prompt","generatePromptForImage","generateTagsForImage","extractedMemories","extractMemoriesFromText","filename","cleanName","tags","nameWithoutExt","dateMatch","keyword","textContent","paragraphs","p","paragraph","cleanText","sanitizeTextInput","generateTagsFromText","text","words","commonWords","wordCount","word","cleanWord","b","memoryImportService","MemoryImport","onBack","user","useAuth","addToast","useError","dispatch","useAppState","processedFiles","setProcessedFiles","useState","importOptions","setImportOptions","isImporting","setIsImporting","importResult","setImportResult","showAdvanced","setShowAdvanced","handleBack","handleFileProcessed","prev","handleImport","clearFiles","jsxs","jsx","ChevronLeft","Upload","FileUpload","Settings","e","AlertTriangle","f","Fragment","Loader","CheckCircle","index"],"ignoreList":[],"sources":["../../src/lib/memoryImportService.ts","../../src/components/MemoryImport.tsx"],"sourcesContent":["import { addMemory } from './dataService';\nimport { addActivityAndRecalculate } from './memoryStrengthService';\nimport { sanitizeMemoryData, sanitizeTextInput } from './inputSanitizer';\nimport { ProcessedFileData } from '../components/FileUpload';\n\nexport interface ImportResult {\n  success: boolean;\n  importedMemories: number;\n  failedImports: number;\n  errors: string[];\n  processedFiles: ProcessedFileData[];\n}\n\nexport interface MemoryImportOptions {\n  autoTag?: boolean;\n  preserveDates?: boolean;\n  generatePrompts?: boolean;\n  batchSize?: number;\n}\n\n/**\n * Import memories from processed file data\n */\nexport const importMemoriesFromFiles = async (\n  files: ProcessedFileData[],\n  userId: string,\n  options: MemoryImportOptions = {}\n): Promise<ImportResult> => {\n  const result: ImportResult = {\n    success: false,\n    importedMemories: 0,\n    failedImports: 0,\n    errors: [],\n    processedFiles: files\n  };\n\n  const normalizedOptions: Required<MemoryImportOptions> = {\n    autoTag: options.autoTag ?? true,\n    preserveDates: options.preserveDates ?? false,\n    generatePrompts: options.generatePrompts ?? true,\n    batchSize: options.batchSize ?? 5\n  };\n\n  try {\n    // Process files in batches to avoid overwhelming the system\n    for (let i = 0; i < files.length; i += normalizedOptions.batchSize) {\n      const batch = files.slice(i, i + normalizedOptions.batchSize);\n      await Promise.all(batch.map(file => processFile(file, userId, normalizedOptions, result)));\n    }\n\n    result.success = result.failedImports === 0;\n  } catch (error: any) {\n    result.errors.push(`Import failed: ${error.message}`);\n    console.error('Memory import error:', error);\n  }\n\n  return result;\n};\n\n/**\n * Process a single file and extract memories\n */\nconst processFile = async (\n  fileData: ProcessedFileData,\n  userId: string,\n  options: MemoryImportOptions,\n  result: ImportResult\n): Promise<void> => {\n  try {\n    const memories = await extractMemoriesFromFile(fileData, options);\n\n    for (const memoryData of memories) {\n      try {\n        // Sanitize the memory data\n        const sanitizedData = sanitizeMemoryData({\n          prompt: memoryData.prompt,\n          response: memoryData.response,\n          type: memoryData.type,\n          tags: memoryData.tags\n        });\n\n        // Create the memory object\n        const memory = {\n          id: `import_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          prompt: sanitizedData.prompt,\n          response: sanitizedData.response,\n          date: memoryData.date || new Date().toISOString(),\n          type: sanitizedData.type,\n          tags: sanitizedData.tags,\n        };\n\n        // Add to database\n        const dbResult = await addMemory(memory, userId);\n        if (dbResult.error) {\n          throw new Error(`Database error: ${dbResult.error.message}`);\n        }\n\n        // Update memory strength\n        try {\n          const { getActivityPoints } = await import('./memoryStrengthService');\n          await addActivityAndRecalculate(userId, {\n            type: 'memory_imported',\n            timestamp: new Date(),\n            value: getActivityPoints('memory_imported'),\n            metadata: {\n              importSource: fileData.metadata.name,\n              memoryId: memory.id\n            }\n          });\n        } catch (error) {\n          console.warn('Failed to update memory strength:', error);\n        }\n\n        result.importedMemories++;\n      } catch (error: any) {\n        result.failedImports++;\n        result.errors.push(`Failed to import memory from ${fileData.metadata.name}: ${error.message}`);\n      }\n    }\n  } catch (error: any) {\n    result.failedImports++;\n    result.errors.push(`Failed to process ${fileData.metadata.name}: ${error.message}`);\n  }\n};\n\n/**\n * Extract memories from different file types\n */\nconst extractMemoriesFromFile = async (\n  fileData: ProcessedFileData,\n  options: MemoryImportOptions\n): Promise<Array<{\n  prompt: string;\n  response: string;\n  type: string;\n  tags: string[];\n  date?: string;\n}>> => {\n  const memories: Array<{\n    prompt: string;\n    response: string;\n    type: string;\n    tags: string[];\n    date?: string;\n  }> = [];\n\n  if (fileData.type === 'image') {\n    // For images, create a memory with the image description\n    const prompt = generatePromptForImage(fileData.metadata.name, options);\n    memories.push({\n      prompt,\n      response: `Image imported: ${fileData.metadata.name}`,\n      type: 'visual',\n      tags: generateTagsForImage(fileData.metadata.name, options),\n      date: options.preserveDates ? new Date(fileData.metadata.lastModified).toISOString() : undefined\n    });\n  } else if (fileData.type === 'document' && fileData.textContent) {\n    // For text documents, try to extract multiple memories\n    const extractedMemories = await extractMemoriesFromText(\n      fileData.textContent,\n      fileData.metadata.name,\n      options\n    );\n    memories.push(...extractedMemories);\n  }\n\n  return memories;\n};\n\n/**\n * Generate an appropriate prompt for an imported image\n */\nconst generatePromptForImage = (filename: string, options: MemoryImportOptions): string => {\n  if (!options.generatePrompts) {\n    return `Imported image: ${filename}`;\n  }\n\n  // Extract meaningful information from filename\n  const nameWithoutExt = filename.replace(/\\.[^/.]+$/, '');\n  const cleanName = nameWithoutExt.replace(/[-_]/g, ' ');\n\n  // Common patterns for photo names\n  if (cleanName.match(/\\b\\d{4}\\b/)) {\n    return `Describe this photo from ${cleanName}`;\n  }\n\n  if (cleanName.toLowerCase().includes('family') || cleanName.toLowerCase().includes('wedding')) {\n    return `Tell me about this ${cleanName.toLowerCase()}`;\n  }\n\n  return `What memories does this image \"${cleanName}\" bring back?`;\n};\n\n/**\n * Generate tags for an imported image\n */\nconst generateTagsForImage = (filename: string, options: MemoryImportOptions): string[] => {\n  if (!options.autoTag) return ['imported', 'image'];\n\n  const tags: string[] = ['imported', 'image'];\n  const nameWithoutExt = filename.toLowerCase().replace(/\\.[^/.]+$/, '');\n\n  // Extract date patterns\n  const dateMatch = nameWithoutExt.match(/(\\d{4})[-_](\\d{2})[-_](\\d{2})/);\n  if (dateMatch) {\n    tags.push(`date:${dateMatch[1]}-${dateMatch[2]}-${dateMatch[3]}`);\n  }\n\n  // Extract common keywords\n  const keywords = ['family', 'wedding', 'birthday', 'vacation', 'holiday', 'party', 'graduation'];\n  keywords.forEach(keyword => {\n    if (nameWithoutExt.includes(keyword)) {\n      tags.push(keyword);\n    }\n  });\n\n  return tags;\n};\n\n/**\n * Extract memories from text content\n */\nconst extractMemoriesFromText = async (\n  textContent: string,\n  filename: string,\n  options: MemoryImportOptions\n): Promise<Array<{\n  prompt: string;\n  response: string;\n  type: string;\n  tags: string[];\n  date?: string;\n}>> => {\n  const memories: Array<{\n    prompt: string;\n    response: string;\n    type: string;\n    tags: string[];\n    date?: string;\n  }> = [];\n\n  // Split text by common delimiters (paragraphs, dates, etc.)\n  const paragraphs = textContent.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\n\n  for (const paragraph of paragraphs) {\n    const cleanText = sanitizeTextInput(paragraph);\n\n    if (cleanText.length < 10) continue; // Skip very short entries\n\n    const prompt = options.generatePrompts\n      ? `From your ${filename} document:`\n      : `Imported text from ${filename}`;\n\n    const tags = options.autoTag\n      ? generateTagsFromText(cleanText).concat(['imported', 'document'])\n      : ['imported', 'document'];\n\n    memories.push({\n      prompt,\n      response: cleanText,\n      type: 'text',\n      tags,\n      date: options.preserveDates ? new Date().toISOString() : undefined\n    });\n  }\n\n  return memories;\n};\n\n/**\n * Generate tags from text content using simple keyword extraction\n */\nconst generateTagsFromText = (text: string): string[] => {\n  const words = text.toLowerCase().split(/\\s+/);\n  const commonWords = new Set([\n    'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'an', 'a'\n  ]);\n\n  const wordCount: { [key: string]: number } = {};\n\n  // Count word frequencies\n  words.forEach(word => {\n    const cleanWord = word.replace(/[^\\w]/g, '');\n    if (cleanWord.length > 3 && !commonWords.has(cleanWord)) {\n      wordCount[cleanWord] = (wordCount[cleanWord] || 0) + 1;\n    }\n  });\n\n  // Get top 3 most frequent words as tags\n  const sortedWords = Object.entries(wordCount)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 3)\n    .map(([word]) => word);\n\n  return sortedWords;\n};\n\n// Export service object\nexport const memoryImportService = {\n  importMemoriesFromFiles,\n  extractMemoriesFromFile,\n  generatePromptForImage,\n  generateTagsForImage,\n  extractMemoriesFromText,\n  generateTagsFromText\n};\n","\nimport { useState, type FC } from 'react';\nimport { Upload, Settings, CheckCircle, AlertTriangle, ChevronLeft, Loader } from 'lucide-react';\nimport { useAuth } from '../lib/AuthContext';\nimport { useError } from '../lib/ErrorContext';\nimport { useAppState } from '../lib/AppStateContext';\nimport FileUpload, { ProcessedFileData } from './FileUpload';\nimport { memoryImportService, MemoryImportOptions, ImportResult } from '../lib/memoryImportService';\n\nconst MemoryImport: FC<{ onBack?: () => void }> = ({ onBack }) => {\n  const { user } = useAuth();\n  const { addToast } = useError();\n  const { dispatch } = useAppState();\n  const [processedFiles, setProcessedFiles] = useState<ProcessedFileData[]>([]);\n  const [importOptions, setImportOptions] = useState<MemoryImportOptions>({\n    autoTag: true,\n    preserveDates: false,\n    generatePrompts: true,\n    batchSize: 5\n  });\n  const [isImporting, setIsImporting] = useState(false);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const handleBack = () => {\n    if (onBack) {\n      onBack();\n    } else {\n      dispatch({ type: 'SET_DETAIL_VIEW', payload: null });\n    }\n  };\n\n  const handleFileProcessed = (fileData: ProcessedFileData) => {\n    setProcessedFiles(prev => [...prev, fileData]);\n  };\n\n  const handleImport = async () => {\n    if (!user?.id || processedFiles.length === 0) return;\n\n    setIsImporting(true);\n    setImportResult(null);\n\n    try {\n      const result = await memoryImportService.importMemoriesFromFiles(\n        processedFiles,\n        user.id,\n        importOptions\n      );\n\n      setImportResult(result);\n\n      if (result.success) {\n        addToast({\n          type: 'success',\n          title: 'Import Complete!',\n          message: `Successfully imported ${result.importedMemories} memories from ${processedFiles.length} files.`,\n          duration: 5000\n        });\n\n        // Clear processed files on success\n        setProcessedFiles([]);\n      } else {\n        addToast({\n          type: 'warning',\n          title: 'Import Completed with Issues',\n          message: `Imported ${result.importedMemories} memories, but ${result.failedImports} failed. Check details below.`,\n          duration: 6000\n        });\n      }\n    } catch (error: any) {\n      addToast({\n        type: 'error',\n        title: 'Import Failed',\n        message: error.message || 'An unexpected error occurred during import.',\n        duration: 5000\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const clearFiles = () => {\n    setProcessedFiles([]);\n    setImportResult(null);\n  };\n\n  return (\n    <div className=\"pt-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <button\n          onClick={handleBack}\n          className=\"w-10 h-10 bg-white/80 backdrop-blur-xl rounded-2xl flex items-center justify-center shadow-lg border border-orange-100 hover:bg-orange-50 transition-colors\"\n          aria-label=\"Go back\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Import Memories</h1>\n          <p className=\"text-sm text-gray-600\">Upload photos and documents to create new memories</p>\n        </div>\n      </div>\n\n      {/* File Upload Section */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-400 to-cyan-500 rounded-2xl flex items-center justify-center\">\n            <Upload className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-gray-800\">Upload Files</h2>\n            <p className=\"text-sm text-gray-600\">Select photos and documents to import</p>\n          </div>\n        </div>\n\n        <FileUpload\n          onFileProcessed={handleFileProcessed}\n          acceptedTypes={['image/*', '.pdf', '.txt', '.doc', '.docx']}\n          maxFileSize={10}\n          multiple={true}\n        />\n      </div>\n\n      {/* Import Options */}\n      {processedFiles.length > 0 && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-purple-400 to-indigo-500 rounded-2xl flex items-center justify-center\">\n                <Settings className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-800\">Import Options</h2>\n                <p className=\"text-sm text-gray-600\">Customize how your files are processed</p>\n              </div>\n            </div>\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"text-orange-600 hover:text-orange-700 font-medium text-sm\"\n            >\n              {showAdvanced ? 'Hide' : 'Show'} Advanced\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            {/* Basic Options */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={importOptions.autoTag}\n                  onChange={(e) => setImportOptions(prev => ({ ...prev, autoTag: e.target.checked }))}\n                  className=\"w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Auto-generate tags</span>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={importOptions.generatePrompts}\n                  onChange={(e) => setImportOptions(prev => ({ ...prev, generatePrompts: e.target.checked }))}\n                  className=\"w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Generate memory prompts</span>\n              </label>\n\n              <label className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={importOptions.preserveDates}\n                  onChange={(e) => setImportOptions(prev => ({ ...prev, preserveDates: e.target.checked }))}\n                  className=\"w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Preserve file dates</span>\n              </label>\n            </div>\n\n            {/* Advanced Options */}\n            {showAdvanced && (\n              <div className=\"bg-gray-50 rounded-2xl p-4 border border-gray-200\">\n                <h3 className=\"text-sm font-semibold text-gray-800 mb-3\">Advanced Settings</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Batch Size\n                    </label>\n                    <select\n                      value={importOptions.batchSize}\n                      onChange={(e) => setImportOptions(prev => ({ ...prev, batchSize: parseInt(e.target.value) }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent\"\n                    >\n                      <option value={1}>1 file at a time</option>\n                      <option value={3}>3 files</option>\n                      <option value={5}>5 files</option>\n                      <option value={10}>10 files</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Import Summary */}\n      {processedFiles.length > 0 && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n          <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Ready to Import</h2>\n\n          <div className=\"space-y-4\">\n            <div className=\"bg-amber-50 rounded-2xl p-4 border border-amber-200\">\n              <div className=\"flex items-start gap-3\">\n                <AlertTriangle className=\"w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm text-amber-800\">\n                  <p className=\"font-semibold mb-1\">Import Summary:</p>\n                  <ul className=\"list-disc list-inside space-y-1\">\n                    <li>{processedFiles.length} files ready for import</li>\n                    {processedFiles.filter(f => f.type === 'image').length > 0 && (\n                      <li>{processedFiles.filter(f => f.type === 'image').length} image files</li>\n                    )}\n                    {processedFiles.filter(f => f.type === 'document').length > 0 && (\n                      <li>{processedFiles.filter(f => f.type === 'document').length} document files</li>\n                    )}\n                    <li>Auto-tagging: {importOptions.autoTag ? 'Enabled' : 'Disabled'}</li>\n                    <li>Memory prompts: {importOptions.generatePrompts ? 'Generated' : 'Simple'}</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={clearFiles}\n                className=\"flex-1 py-3 px-6 bg-gray-200 text-gray-700 rounded-2xl font-semibold hover:bg-gray-300 transition-all\"\n                disabled={isImporting}\n              >\n                Clear Files\n              </button>\n              <button\n                onClick={handleImport}\n                disabled={isImporting}\n                className=\"flex-1 flex items-center justify-center gap-3 py-3 px-6 bg-gradient-to-r from-orange-500 to-rose-500 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\n              >\n                {isImporting ? (\n                  <>\n                    <Loader className=\"w-5 h-5 animate-spin\" />\n                    Importing...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-5 h-5\" />\n                    Import Memories\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Import Results */}\n      {importResult && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <div className={`w-10 h-10 rounded-2xl flex items-center justify-center ${\n              importResult.success\n                ? 'bg-gradient-to-br from-green-400 to-emerald-500'\n                : 'bg-gradient-to-br from-amber-400 to-orange-500'\n            }`}>\n              {importResult.success ? (\n                <CheckCircle className=\"w-6 h-6 text-white\" />\n              ) : (\n                <AlertTriangle className=\"w-6 h-6 text-white\" />\n              )}\n            </div>\n            <div>\n              <h2 className=\"text-xl font-bold text-gray-800\">Import Results</h2>\n              <p className=\"text-sm text-gray-600\">\n                {importResult.success ? 'Import completed successfully' : 'Import completed with some issues'}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n            <div className=\"bg-green-50 rounded-xl p-3 text-center border border-green-200\">\n              <div className=\"text-2xl font-bold text-green-700\">{importResult.importedMemories}</div>\n              <div className=\"text-xs text-green-600\">Imported</div>\n            </div>\n            <div className=\"bg-red-50 rounded-xl p-3 text-center border border-red-200\">\n              <div className=\"text-2xl font-bold text-red-700\">{importResult.failedImports}</div>\n              <div className=\"text-xs text-red-600\">Failed</div>\n            </div>\n            <div className=\"bg-blue-50 rounded-xl p-3 text-center border border-blue-200\">\n              <div className=\"text-2xl font-bold text-blue-700\">{importResult.processedFiles.length}</div>\n              <div className=\"text-xs text-blue-600\">Files</div>\n            </div>\n            <div className=\"bg-gray-50 rounded-xl p-3 text-center border border-gray-200\">\n              <div className=\"text-2xl font-bold text-gray-700\">{importResult.errors.length}</div>\n              <div className=\"text-xs text-gray-600\">Errors</div>\n            </div>\n          </div>\n\n          {importResult.errors.length > 0 && (\n            <div className=\"bg-red-50 rounded-2xl p-4 border border-red-200\">\n              <h3 className=\"text-sm font-semibold text-red-800 mb-2\">Errors:</h3>\n              <ul className=\"text-sm text-red-700 space-y-1\">\n                {importResult.errors.slice(0, 5).map((error, index) => (\n                  <li key={index} className=\"flex items-start gap-2\">\n                    <span className=\"text-red-500 mt-1\">•</span>\n                    <span>{error}</span>\n                  </li>\n                ))}\n                {importResult.errors.length > 5 && (\n                  <li className=\"text-red-600 font-medium\">\n                    ... and {importResult.errors.length - 5} more errors\n                  </li>\n                )}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Help Section */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <h2 className=\"text-xl font-bold text-gray-800 mb-4\">Import Tips</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h3 className=\"font-semibold text-gray-800 mb-2\">For Images:</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Photos will create visual memory prompts</li>\n              <li>• Filenames with dates are automatically tagged</li>\n              <li>• Keywords like \"family\", \"wedding\" are detected</li>\n              <li>• Supported formats: JPG, PNG, GIF, WebP</li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-gray-800 mb-2\">For Documents:</h3>\n            <ul className=\"text-sm text-gray-600 space-y-1\">\n              <li>• Text files are split into memory entries</li>\n              <li>• Each paragraph becomes a separate memory</li>\n              <li>• Auto-generated tags from content keywords</li>\n              <li>• Supported formats: TXT, PDF (text-based)</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryImport;\n"],"file":"assets/MemoryImport-LAgzw7O-.js"}