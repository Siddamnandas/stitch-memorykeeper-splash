{"version":3,"file":"LegacyLink-BITB8_KX.js","sources":["../../src/components/LegacyLink.tsx"],"sourcesContent":["import React, { memo } from 'react';\nimport { ChevronLeft, Link, CheckCircle, X, RotateCcw, Trophy, Target, Clock, Plus, Minus, Zap } from 'lucide-react';\nimport { useAdaptiveAgent } from '../hooks/useAdaptiveAgent';\nimport { useAuth } from '../lib/AuthContext';\nimport { useAppState } from '../lib/AppStateContext';\nimport { addMemory, updateMemoryStrength } from '../lib/dataService';\nimport AdaptiveAgentDisplay from './AdaptiveAgentDisplay';\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface LegacyLinkProps {\n  onBack: () => void;\n}\n\ninterface Node {\n  id: string;\n  text: string;\n  type: 'memory' | 'concept' | 'person' | 'place' | 'emotion' | 'event';\n  x: number;\n  y: number;\n  isCentral?: boolean;\n}\n\ninterface Connection {\n  id: string;\n  sourceId: string;\n  targetId: string;\n  strength: number; // 1-10\n}\n\nconst LegacyLink: React.FC<LegacyLinkProps> = ({ onBack }) => {\n  const { user } = useAuth();\n  const { state } = useAppState();\n  const currentMemory = state.memories[0]; // Get most recent memory\n  const difficulty = state.memoryStrength < 40 ? 'easy' : \n                    state.memoryStrength < 70 ? 'medium' : 'hard';\n  \n  const [gameState, setGameState] = useState<'ready' | 'playing' | 'success' | 'failed'>('ready');\n  const [nodes, setNodes] = useState<Node[]>([]);\n  const [connections, setConnections] = useState<Connection[]>([]);\n  const [selectedNode, setSelectedNode] = useState<string | null>(null);\n  const [newNodeText, setNewNodeText] = useState('');\n  const [level, setLevel] = useState(1);\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes per level\n  const [mistakes, setMistakes] = useState(0);\n  const [streak, setStreak] = useState(0);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [feedbackMessage, setFeedbackMessage] = useState('');\n  const [mode, setMode] = useState<'guided' | 'semi-guided' | 'free-form'>('guided');\n\n  // Adaptive agent integration\n  const {\n    agentDecision,\n    isVisible: agentVisible,\n    showAgent,\n    hideAgent,\n    requestHint,\n    updateGameProgress,\n    recordGameCompletion\n  } = useAdaptiveAgent({\n    userId: user?.id || 'guest',\n    gameId: 'legacy-link',\n    difficulty,\n    currentMemory\n  });\n\n  // Set mode based on memory strength (adaptation logic from PRD)\n  useEffect(() => {\n    if (state.memoryStrength < 40) {\n      setMode('guided');\n    } else if (state.memoryStrength < 70) {\n      setMode('semi-guided');\n    } else {\n      setMode('free-form');\n    }\n  }, [state.memoryStrength]);\n\n  // Generate initial nodes based on mode\n  const generateInitialNodes = useCallback(() => {\n    // Central memory node\n    const centralNode: Node = {\n      id: 'central',\n      text: currentMemory?.prompt || 'Your Memory',\n      type: 'memory',\n      x: 50,\n      y: 50,\n      isCentral: true\n    };\n\n    const initialNodes: Node[] = [centralNode];\n    \n    // Add AI-suggested nodes based on mode\n    if (mode === 'guided' || mode === 'semi-guided') {\n      // For guided mode, suggest all nodes\n      // For semi-guided, suggest 3 nodes\n      const suggestedCount = mode === 'guided' ? 5 : 3;\n      \n      // Sample suggestions based on memory content\n      const suggestions: Node[] = [\n        { id: 'person-1', text: 'Family Member', type: 'person', x: 30, y: 30 },\n        { id: 'place-1', text: 'Location', type: 'place', x: 70, y: 30 },\n        { id: 'emotion-1', text: 'Feeling', type: 'emotion', x: 30, y: 70 },\n        { id: 'event-1', text: 'Event', type: 'event', x: 70, y: 70 },\n        { id: 'concept-1', text: 'Concept', type: 'concept', x: 50, y: 20 }\n      ];\n      \n      // Add suggested nodes\n      for (let i = 0; i < suggestedCount; i++) {\n        if (suggestions[i]) {\n          initialNodes.push({\n            ...suggestions[i],\n            x: suggestions[i].x + (Math.random() * 10 - 5), // Add some randomness\n            y: suggestions[i].y + (Math.random() * 10 - 5)\n          });\n        }\n      }\n    }\n    \n    setNodes(initialNodes);\n    \n    // Set time based on difficulty\n    const time = state.memoryStrength < 40 ? 180 : \n                state.memoryStrength < 70 ? 150 : 120;\n    setTimeLeft(time);\n  }, [currentMemory, mode, state.memoryStrength]);\n\n  // Add a new node\n  const addNode = () => {\n    if (!newNodeText.trim()) return;\n    \n    const newNode: Node = {\n      id: `node-${Date.now()}`,\n      text: newNodeText,\n      type: 'concept', // Default type, could be enhanced\n      x: 20 + Math.random() * 60, // Random position\n      y: 20 + Math.random() * 60\n    };\n    \n    setNodes(prev => [...prev, newNode]);\n    setNewNodeText('');\n  };\n\n  // Connect two nodes\n  const connectNodes = (targetNodeId: string) => {\n    if (!selectedNode || selectedNode === targetNodeId) return;\n    \n    // Check if connection already exists\n    const connectionExists = connections.some(conn => \n      (conn.sourceId === selectedNode && conn.targetId === targetNodeId) ||\n      (conn.sourceId === targetNodeId && conn.targetId === selectedNode)\n    );\n    \n    if (connectionExists) return;\n    \n    const newConnection: Connection = {\n      id: `conn-${Date.now()}`,\n      sourceId: selectedNode,\n      targetId: targetNodeId,\n      strength: 5 // Default strength\n    };\n    \n    setConnections(prev => [...prev, newConnection]);\n    setSelectedNode(null);\n    \n    // Award points for connection\n    const points = 8;\n    setScore(prev => prev + points);\n    setStreak(prev => prev + 1);\n    \n    // Check for completion\n    if (nodes.length + connections.length >= 7) {\n      setGameState('success');\n      setFeedbackMessage(`Great job! You've created a web of ${nodes.length} nodes and ${connections.length} connections!`);\n      setShowFeedback(true);\n      \n      // Record success\n      recordGameCompletion(true, (120 + level * 30) - timeLeft);\n      \n      // Update memory strength\n      if (user?.id) {\n        updateMemoryStrength(user.id, score + streak * 5);\n      }\n      \n      setTimeout(() => {\n        setShowFeedback(false);\n        showAgent();\n      }, 2000);\n    }\n  };\n\n  // Timer effect\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (gameState === 'playing' && timeLeft > 0) {\n      timer = setTimeout(() => setTimeLeft(prev => prev - 1), 1000);\n    } else if (gameState === 'playing' && timeLeft === 0) {\n      setGameState('failed');\n      setMistakes(prev => prev + 1);\n      setStreak(0);\n      setFeedbackMessage('Time\\'s up! Try to create connections faster.');\n      setShowFeedback(true);\n      showAgent();\n    }\n    return () => clearTimeout(timer);\n  }, [gameState, timeLeft]);\n\n  // Update agent with game progress\n  useEffect(() => {\n    if (gameState === 'playing') {\n      updateGameProgress(nodes.length, mistakes, streak, timeLeft);\n    }\n  }, [nodes.length, mistakes, streak, timeLeft, gameState, updateGameProgress]);\n\n  // Start new game\n  const startGame = () => {\n    setGameState('playing');\n    setScore(0);\n    setLevel(1);\n    setMistakes(0);\n    setStreak(0);\n    setConnections([]);\n    setSelectedNode(null);\n    setNewNodeText('');\n    setShowFeedback(false);\n    hideAgent();\n    generateInitialNodes();\n  };\n\n  // Reset game\n  const resetGame = () => {\n    setGameState('ready');\n    setScore(0);\n    setLevel(1);\n    setTimeLeft(120);\n    setMistakes(0);\n    setStreak(0);\n    setNodes([]);\n    setConnections([]);\n    setSelectedNode(null);\n    setNewNodeText('');\n    setShowFeedback(false);\n    hideAgent();\n  };\n\n  // Get node type color\n  const getNodeTypeColor = (type: Node['type']) => {\n    switch (type) {\n      case 'memory': return 'bg-gradient-to-br from-purple-500 to-indigo-500';\n      case 'person': return 'bg-gradient-to-br from-blue-500 to-cyan-500';\n      case 'place': return 'bg-gradient-to-br from-green-500 to-emerald-500';\n      case 'emotion': return 'bg-gradient-to-br from-red-500 to-orange-500';\n      case 'event': return 'bg-gradient-to-br from-yellow-500 to-amber-500';\n      case 'concept': return 'bg-gradient-to-br from-pink-500 to-rose-500';\n      default: return 'bg-gradient-to-br from-gray-500 to-gray-600';\n    }\n  };\n\n  return (\n    <div className=\"pt-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <button\n          onClick={onBack}\n          className=\"w-10 h-10 bg-white/80 backdrop-blur-xl rounded-2xl flex items-center justify-center shadow-lg border border-orange-100\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <h1 className=\"text-2xl font-bold text-gray-800\">Legacy Link</h1>\n      </div>\n\n      {/* Game Stats */}\n      <div className=\"grid grid-cols-4 gap-3 mb-6\">\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-3 shadow-lg border border-orange-100\">\n          <div className=\"flex items-center gap-1 mb-1\">\n            <Trophy className=\"w-4 h-4 text-yellow-500\" />\n            <span className=\"text-xs font-bold text-gray-800\">Score</span>\n          </div>\n          <span className=\"text-lg font-bold text-gray-800\">{score}</span>\n        </div>\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-3 shadow-lg border border-orange-100\">\n          <div className=\"flex items-center gap-1 mb-1\">\n            <Target className=\"w-4 h-4 text-blue-500\" />\n            <span className=\"text-xs font-bold text-gray-800\">Level</span>\n          </div>\n          <span className=\"text-lg font-bold text-gray-800\">{level}</span>\n        </div>\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-3 shadow-lg border border-orange-100\">\n          <div className=\"flex items-center gap-1 mb-1\">\n            <RotateCcw className=\"w-4 h-4 text-green-500\" />\n            <span className=\"text-xs font-bold text-gray-800\">Streak</span>\n          </div>\n          <span className=\"text-lg font-bold text-gray-800\">{streak}</span>\n        </div>\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-3 shadow-lg border border-orange-100\">\n          <div className=\"flex items-center gap-1 mb-1\">\n            <Clock className=\"w-4 h-4 text-orange-500\" />\n            <span className=\"text-xs font-bold text-gray-800\">Time</span>\n          </div>\n          <span className=\"text-lg font-bold text-gray-800\">{timeLeft}s</span>\n        </div>\n      </div>\n\n      {/* Mode Indicator */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-3 shadow-lg border border-orange-100 mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Zap className=\"w-5 h-5 text-orange-500\" />\n            <span className=\"font-bold text-gray-800\">\n              {mode === 'guided' ? 'Guided Mode' : \n               mode === 'semi-guided' ? 'Semi-Guided Mode' : 'Free-Form Mode'}\n            </span>\n          </div>\n          <span className=\"text-sm text-gray-600\">\n            {mode === 'guided' ? 'AI suggests all nodes' : \n             mode === 'semi-guided' ? 'AI suggests some nodes' : 'Create your own nodes'}\n          </span>\n        </div>\n      </div>\n\n      {/* Game Board */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100 mb-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-indigo-500 rounded-2xl flex items-center justify-center\">\n            <Link className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"font-bold text-gray-800\">Legacy Link</h2>\n            <p className=\"text-sm text-gray-500\">Connect related memories and concepts</p>\n          </div>\n        </div>\n\n        <p className=\"mb-6 text-gray-600\">\n          Create a web of connections between your memories and related concepts. \n          {mode === 'guided' \n            ? ' AI has suggested nodes for you to connect.' \n            : mode === 'semi-guided' \n              ? ' AI has suggested some nodes, add your own connections.' \n              : ' Create your own nodes and connections.'}\n        </p>\n\n        {gameState === 'ready' && (\n          <div className=\"text-center\">\n            <button\n              onClick={startGame}\n              className=\"px-8 py-3 bg-gradient-to-r from-purple-500 to-indigo-500 text-white font-bold rounded-2xl shadow-lg hover:shadow-xl transition-all flex items-center gap-2 mx-auto\"\n            >\n              <Link className=\"w-5 h-5\" />\n              Start Linking\n            </button>\n          </div>\n        )}\n\n        {gameState === 'playing' && (\n          <>\n            {/* Node Graph Visualization */}\n            <div className=\"relative h-96 bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl border-2 border-dashed border-purple-200 mb-6 overflow-hidden\">\n              {/* Connections */}\n              <svg className=\"absolute inset-0 w-full h-full\">\n                {connections.map(conn => {\n                  const sourceNode = nodes.find(n => n.id === conn.sourceId);\n                  const targetNode = nodes.find(n => n.id === conn.targetId);\n                  \n                  if (!sourceNode || !targetNode) return null;\n                  \n                  // Convert percentages to pixels (assuming 400px height)\n                  const sourceX = (sourceNode.x / 100) * 400;\n                  const sourceY = (sourceNode.y / 100) * 400;\n                  const targetX = (targetNode.x / 100) * 400;\n                  const targetY = (targetNode.y / 100) * 400;\n                  \n                  return (\n                    <line\n                      key={conn.id}\n                      x1={sourceX}\n                      y1={sourceY}\n                      x2={targetX}\n                      y2={targetY}\n                      stroke=\"#9333ea\"\n                      strokeWidth=\"2\"\n                      strokeDasharray={conn.strength > 7 ? \"none\" : \"5,5\"}\n                    />\n                  );\n                })}\n              </svg>\n              \n              {/* Nodes */}\n              {nodes.map(node => (\n                <div\n                  key={node.id}\n                  onClick={() => {\n                    if (selectedNode) {\n                      connectNodes(node.id);\n                    } else {\n                      setSelectedNode(node.id);\n                    }\n                  }}\n                  className={`absolute w-16 h-16 rounded-full flex items-center justify-center text-white text-xs font-bold text-center p-1 cursor-pointer transform -translate-x-1/2 -translate-y-1/2 transition-all ${\n                    getNodeTypeColor(node.type)\n                  } ${selectedNode === node.id ? 'ring-4 ring-yellow-400 scale-110' : ''} ${\n                    node.isCentral ? 'w-20 h-20' : ''\n                  }`}\n                  style={{\n                    left: `${node.x}%`,\n                    top: `${node.y}%`\n                  }}\n                >\n                  <span className=\"truncate\">{node.text}</span>\n                </div>\n              ))}\n              \n              {/* Instructions */}\n              <div className=\"absolute bottom-4 left-4 right-4 bg-black/50 text-white text-sm p-2 rounded-lg\">\n                {selectedNode \n                  ? 'Select another node to connect' \n                  : 'Select a node to start connecting'}\n              </div>\n            </div>\n\n            {/* Add New Node (Free-form mode) */}\n            {(mode === 'free-form' || mode === 'semi-guided') && (\n              <div className=\"flex gap-2 mb-6\">\n                <input\n                  type=\"text\"\n                  value={newNodeText}\n                  onChange={(e) => setNewNodeText(e.target.value)}\n                  placeholder=\"Add a new concept...\"\n                  className=\"flex-1 px-4 py-2 bg-white border border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                />\n                <button\n                  onClick={addNode}\n                  disabled={!newNodeText.trim()}\n                  className=\"px-4 py-2 bg-gradient-to-r from-purple-500 to-indigo-500 text-white rounded-2xl disabled:opacity-50\"\n                >\n                  <Plus className=\"w-5 h-5\" />\n                </button>\n              </div>\n            )}\n\n            {/* Connection Info */}\n            <div className=\"bg-purple-50 rounded-2xl p-4 mb-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-bold text-purple-800\">Connections: {connections.length}</span>\n                <span className=\"font-bold text-purple-800\">Nodes: {nodes.length}</span>\n              </div>\n              <div className=\"w-full bg-purple-200 rounded-full h-2 mt-2\">\n                <div \n                  className=\"bg-gradient-to-r from-purple-500 to-indigo-500 h-2 rounded-full\" \n                  style={{ width: `${Math.min(100, (connections.length / 7) * 100)}%` }}\n                ></div>\n              </div>\n              <p className=\"text-xs text-purple-700 mt-1\">\n                Complete 7 connections to finish the level\n              </p>\n            </div>\n          </>\n        )}\n\n        {/* Feedback */}\n        {showFeedback && (\n          <div className={`mt-6 p-4 rounded-2xl text-center ${\n            gameState === 'success' ? 'bg-green-100' : 'bg-red-100'\n          }`}>\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              {gameState === 'success' ? (\n                <CheckCircle className=\"w-6 h-6 text-green-600\" />\n              ) : (\n                <X className=\"w-6 h-6 text-red-600\" />\n              )}\n              <span className={`font-bold ${\n                gameState === 'success' ? 'text-green-800' : 'text-red-800'\n              }`}>\n                {gameState === 'success' ? 'Excellent!' : 'Try Again'}\n              </span>\n            </div>\n            <p className={gameState === 'success' ? 'text-green-700' : 'text-red-700'}>\n              {feedbackMessage}\n            </p>\n          </div>\n        )}\n\n        {gameState === 'success' && (\n          <div className=\"text-center mt-6\">\n            <button\n              onClick={() => {\n                setLevel(prev => prev + 1);\n                setShowFeedback(false);\n                startGame();\n              }}\n              className=\"px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold rounded-2xl shadow-lg hover:shadow-xl transition-all\"\n            >\n              Next Level\n            </button>\n          </div>\n        )}\n\n        {gameState === 'failed' && (\n          <div className=\"text-center mt-6\">\n            <button\n              onClick={() => {\n                setShowFeedback(false);\n                setGameState('playing');\n              }}\n              className=\"px-6 py-3 bg-gradient-to-r from-orange-500 to-rose-500 text-white font-bold rounded-2xl shadow-lg hover:shadow-xl transition-all\"\n            >\n              Try Again\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Reset Button */}\n      <div className=\"text-center mb-6\">\n        <button\n          onClick={resetGame}\n          className=\"px-6 py-2 bg-gray-200 text-gray-700 font-bold rounded-xl hover:bg-gray-300 transition-all\"\n        >\n          Reset Game\n        </button>\n      </div>\n\n      {/* Adaptive Agent Display */}\n      {agentDecision && (\n        <AdaptiveAgentDisplay\n          hint={agentDecision.hint}\n          scaffolding={agentDecision.scaffolding}\n          agentMessage={agentDecision.agentMessage}\n          agentType={agentDecision.agentType}\n          isVisible={agentVisible}\n          onDismiss={hideAgent}\n          onRequestHint={requestHint}\n        />\n      )}\n\n      {/* Instructions */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <h3 className=\"font-bold text-gray-800 mb-3\">How to Play</h3>\n        <ul className=\"text-gray-700 space-y-2 text-sm\">\n          <li>• Click on a node to select it, then click another node to create a connection</li>\n          <li>• Create connections between related memories and concepts</li>\n          <li>• Add your own concepts in free-form mode</li>\n          <li>• Complete 7 connections to finish the level</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(LegacyLink);"],"names":["LegacyLink","onBack","user","useAuth","state","useAppState","currentMemory","difficulty","gameState","setGameState","useState","nodes","setNodes","connections","setConnections","selectedNode","setSelectedNode","newNodeText","setNewNodeText","level","setLevel","score","setScore","timeLeft","setTimeLeft","mistakes","setMistakes","streak","setStreak","showFeedback","setShowFeedback","feedbackMessage","setFeedbackMessage","mode","setMode","agentDecision","agentVisible","showAgent","hideAgent","requestHint","updateGameProgress","recordGameCompletion","useAdaptiveAgent","useEffect","generateInitialNodes","useCallback","initialNodes","suggestedCount","suggestions","i","time","addNode","newNode","prev","connectNodes","targetNodeId","conn","newConnection","points","updateMemoryStrength","timer","startGame","resetGame","getNodeTypeColor","type","jsxs","jsx","ChevronLeft","Trophy","Target","RotateCcw","Clock","Zap","Link","Fragment","sourceNode","n","targetNode","sourceX","sourceY","targetX","targetY","node","e","Plus","CheckCircle","X","AdaptiveAgentDisplay","LegacyLink$1","memo"],"mappings":"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"}