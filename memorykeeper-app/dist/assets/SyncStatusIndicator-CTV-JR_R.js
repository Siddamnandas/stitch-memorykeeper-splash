var I=Object.defineProperty;var M=(t,e,s)=>e in t?I(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var c=(t,e,s)=>M(t,typeof e!="symbol"?e+"":e,s);import{u as L,r as h,j as o,m as O,aq as x,ar as P,as as A,k as R,at as $}from"./ai-studio-D1VHpCnl.js";import{l as y,n as T,s as D,m as k,o as j,g as q,p as F,q as U,t as W,v as Y,w as N,a as B}from"./game-components-DlDolkYV.js";import{i as G}from"./index-BYmrHuMl.js";const H=t=>typeof t.sync<"u",C=async t=>{const e={success:!1,uploadedCount:0,downloadedCount:0,conflictsResolved:0,errors:[]};if(!y)return e.success=!0,e;if(!t)return e.errors.push("User ID required for sync"),e;try{const s=await T();for(const n of s)try{const a={user_id:t,prompt:n.prompt,response:n.response,date:n.date,type:n.type,tags:n.tags},{error:i}=await D.from("memories").insert([a]).select().single();if(i)if(i.code==="23505")await k([n.id]),e.conflictsResolved++;else{e.errors.push(`Failed to upload memory "${n.prompt}": ${i.message}`);continue}else await k([n.id]),e.uploadedCount++}catch(a){e.errors.push(`Error uploading memory "${n.prompt}": ${a.message}`)}try{const{data:n,error:a}=await j(t);if(a)e.errors.push(`Failed to fetch remote memories: ${a.message}`);else if(n){const i=await q(),u=new Set(i.map(r=>r.id)),f=n.filter(r=>r.id&&!u.has(r.id));for(const r of f){const d={id:r.id||`remote-${Date.now()}-${Math.random()}`,userId:t,prompt:r.prompt,response:r.response,date:r.date,type:r.type,tags:r.tags,synced:!0};await F(d)?e.downloadedCount++:e.errors.push(`Failed to store memory "${r.prompt}" locally`)}}}catch(n){e.errors.push(`Error downloading memories: ${n.message}`)}try{const{data:n,error:a}=await U(t);if(!a&&n){const i={id:"default",userId:t,fullName:n.full_name||void 0,avatarUrl:n.avatar_url||void 0,memoryStrength:n.memory_strength||0,synced:!0};await W(i),await Y()}}catch(n){e.errors.push(`Error syncing profile: ${n.message}`)}if(e.success=e.errors.length===0,e.success)try{localStorage.setItem("lastSyncTime",Date.now().toString())}catch(n){console.warn("Could not update lastSyncTime in localStorage:",n)}return e}catch(s){return e.errors.push(`Sync failed: ${s.message}`),e}},E=()=>navigator.onLine,b=async t=>{const e=await T(),s=await N();let n=null;try{const a=localStorage.getItem("lastSyncTime");a&&(n=parseInt(a,10))}catch(a){console.warn("Could not read lastSyncTime from localStorage:",a)}return{isOnline:E(),lastSyncTime:n,pendingChanges:e.length+(s&&!s.synced?1:0),status:E()?"idle":"offline"}},Q=async t=>{if(!y)return!0;try{if("serviceWorker"in navigator){const e=await navigator.serviceWorker.ready;if(H(e))return await e.sync.register("background-sync"),!0}return await C(t),!0}catch(e){return console.error("Failed to queue background sync:",e),!1}},w=t=>typeof t.sync<"u";class z{constructor(){c(this,"syncInterval",null);c(this,"retryTimeout",null);c(this,"isSyncing",!1);c(this,"retryCount",0);c(this,"maxRetries",3);c(this,"baseRetryDelay",5e3);c(this,"syncIntervalMs",3e5);c(this,"userId",null);c(this,"isOnline",navigator.onLine);c(this,"listeners",[]);c(this,"lastPendingChanges",0);c(this,"workboxSyncRegistered",!1);window.addEventListener("online",this.handleOnline.bind(this)),window.addEventListener("offline",this.handleOffline.bind(this)),this.registerServiceWorker()}async registerServiceWorker(){if("serviceWorker"in navigator)try{const e=await navigator.serviceWorker.register("/sw.js");if(console.log("Service worker registered successfully"),w(e))try{await e.sync.register("background-sync"),console.log("Background sync registered"),this.workboxSyncRegistered=!0}catch(s){console.error("Failed to register background sync:",s)}}catch(e){console.error("Service worker registration failed:",e)}}init(e){if(!y){console.log("Background sync not initialised: Supabase is not configured.");return}this.userId=e,this.syncInterval&&clearInterval(this.syncInterval),this.syncInterval=window.setInterval(this.sync.bind(this),this.syncIntervalMs),this.sync()}destroy(){this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null),this.retryTimeout&&(clearTimeout(this.retryTimeout),this.retryTimeout=null),this.listeners=[]}addListener(e){this.listeners.push(e)}removeListener(e){const s=this.listeners.indexOf(e);s>-1&&this.listeners.splice(s,1)}notifyListeners(e){this.listeners.forEach(s=>s(e))}handleOnline(){y&&(this.isOnline=!0,console.log("Device is online, triggering sync"),this.sync(),this.workboxSyncRegistered&&navigator.serviceWorker.ready.then(async e=>{if(w(e))try{await e.sync.register("background-sync")}catch(s){console.error("Failed to trigger background sync:",s)}}).catch(e=>{console.error("Failed to obtain service worker registration:",e)}))}handleOffline(){this.isOnline=!1,console.log("Device is offline, pausing sync"),this.notifyListeners({isOnline:!1,lastSyncTime:this.getLastSyncTime(),pendingChanges:this.lastPendingChanges,status:"offline"})}getLastSyncTime(){try{const e=localStorage.getItem("lastSyncTime");return e?parseInt(e,10):null}catch(e){return console.warn("Could not read lastSyncTime from localStorage:",e),null}}async updatePendingChanges(){try{const e=await T(),s=await N();this.lastPendingChanges=e.length+(s&&!s.synced?1:0)}catch(e){console.warn("Could not get pending changes count:",e)}}async sync(){if(!y){this.notifyListeners({isOnline:this.isOnline,lastSyncTime:this.getLastSyncTime(),pendingChanges:this.lastPendingChanges,status:this.isOnline?"idle":"offline"});return}if(!(this.isSyncing||!this.isOnline||!this.userId)){this.isSyncing=!0,await this.updatePendingChanges(),this.notifyListeners({isOnline:!0,lastSyncTime:this.getLastSyncTime(),pendingChanges:this.lastPendingChanges,status:"syncing"});try{const e=await C(this.userId);if(e.success){this.retryCount=0;try{localStorage.setItem("lastSyncTime",Date.now().toString())}catch(s){console.warn("Could not update lastSyncTime in localStorage:",s)}await this.updatePendingChanges(),this.notifyListeners({isOnline:!0,lastSyncTime:Date.now(),pendingChanges:this.lastPendingChanges,status:"idle"})}else console.error("Sync failed:",e.errors),this.handleSyncError()}catch(e){console.error("Sync error:",e),this.handleSyncError()}finally{this.isSyncing=!1}}}handleSyncError(){if(this.retryCount++,this.retryCount<=this.maxRetries){const e=this.baseRetryDelay*Math.pow(2,this.retryCount-1);this.notifyListeners({isOnline:!0,lastSyncTime:this.getLastSyncTime(),pendingChanges:this.lastPendingChanges,status:"error"}),console.log(`Sync failed, retrying in ${e}ms (attempt ${this.retryCount}/${this.maxRetries})`),this.retryTimeout&&clearTimeout(this.retryTimeout),this.retryTimeout=window.setTimeout(()=>{this.sync()},e)}else this.retryCount=0,this.notifyListeners({isOnline:!0,lastSyncTime:this.getLastSyncTime(),pendingChanges:this.lastPendingChanges,status:"error"}),console.error("Max sync retries reached, giving up until next interval")}async forceSync(){y&&(this.retryTimeout&&(clearTimeout(this.retryTimeout),this.retryTimeout=null),this.retryCount=0,await this.sync())}async queueSync(){y&&(this.workboxSyncRegistered?navigator.serviceWorker.ready.then(async e=>{if(w(e))try{await e.sync.register("background-sync")}catch(s){console.error("Failed to queue background sync:",s),await this.sync()}else await this.sync()}).catch(e=>{console.error("Failed to obtain service worker registration for queue:",e),this.sync()}):this.sync())}}const m=new z,J=()=>{const{user:t}=B(),{state:e,dispatch:s}=L(),n=h.useRef(null),a=h.useRef(!1),i=h.useCallback(async()=>{if(!(!(t!=null&&t.id)||!y)){if(G(`manual_sync_${t.id}`,5,6e4)){console.warn("Manual sync rate limited");return}try{s({type:"SET_SYNC_STATUS",payload:"syncing"});const r=await C(t.id);if(r.success){s({type:"SET_SYNC_STATUS",payload:"idle"}),s({type:"SET_LAST_SYNC_TIME",payload:Date.now()});const d=await b(t.id);s({type:"SET_PENDING_CHANGES",payload:d.pendingChanges})}else s({type:"SET_SYNC_STATUS",payload:"error"}),console.error("Manual sync failed:",r.errors)}catch(r){s({type:"SET_SYNC_STATUS",payload:"error"}),console.error("Manual sync error:",r)}}},[t==null?void 0:t.id,s]),u=h.useCallback(async()=>{if(!(!(t!=null&&t.id)||!y))try{const r=await b(t.id);s({type:"SET_ONLINE_STATUS",payload:r.isOnline}),s({type:"SET_SYNC_STATUS",payload:r.status}),r.lastSyncTime&&s({type:"SET_LAST_SYNC_TIME",payload:r.lastSyncTime}),s({type:"SET_PENDING_CHANGES",payload:r.pendingChanges})}catch(r){console.error("Failed to check sync status:",r)}},[t==null?void 0:t.id,s]),f=h.useCallback(async()=>{if(!(!(t!=null&&t.id)||!y))try{await Q(t.id)?console.log("Sync queued for background processing"):(console.warn("Failed to queue sync, falling back to manual sync"),await i())}catch(r){console.error("Failed to queue sync:",r),await i()}},[t==null?void 0:t.id,i]);return h.useEffect(()=>{var g;if(!(t!=null&&t.id)||!y||a.current)return;a.current=!0,m.init(t.id);const r=l=>{s({type:"SET_ONLINE_STATUS",payload:l.isOnline}),s({type:"SET_SYNC_STATUS",payload:l.status}),l.lastSyncTime&&s({type:"SET_LAST_SYNC_TIME",payload:l.lastSyncTime}),s({type:"SET_PENDING_CHANGES",payload:l.pendingChanges})};m.addListener(r),u(),n.current=setInterval(()=>{navigator.onLine&&e.syncStatus!=="syncing"&&i()},5*60*1e3);const d=l=>{l.data&&l.data.type==="SYNC_COMPLETE"&&(console.log("Background sync completed via service worker"),u())};return(g=navigator.serviceWorker)==null||g.addEventListener("message",d),()=>{var l;n.current&&clearInterval(n.current),m.removeListener(r),(l=navigator.serviceWorker)==null||l.removeEventListener("message",d),a.current=!1}},[t==null?void 0:t.id,i,u,e.syncStatus,s]),{isOnline:e.isOnline,syncStatus:e.syncStatus,lastSyncTime:e.lastSyncTime,pendingChanges:e.pendingChanges,manualSync:i,checkSyncStatus:u,queueSync:f,forceSync:m.forceSync.bind(m)}},ee=()=>{const{isOnline:t,syncStatus:e,lastSyncTime:s,pendingChanges:n,forceSync:a,queueSync:i}=J(),u=g=>{if(!g)return"Never";const S=Date.now()-g,p=Math.floor(S/6e4),v=Math.floor(S/36e5),_=Math.floor(S/864e5);return p<1?"Just now":p<60?`${p}m ago`:v<24?`${v}h ago`:`${_}d ago`},f=()=>{if(!t)return o.jsx(P,{className:"w-4 h-4 text-gray-500"});switch(e){case"syncing":return o.jsx(x,{className:"w-4 h-4 text-blue-500 animate-spin"});case"error":return o.jsx($,{className:"w-4 h-4 text-red-500"});case"idle":return o.jsx(R,{className:"w-4 h-4 text-green-500"});default:return o.jsx(A,{className:"w-4 h-4 text-gray-500"})}},r=()=>{if(!t)return"Offline";switch(e){case"syncing":return"Syncing...";case"error":return"Sync error";case"idle":return"Synced";default:return"Online"}},d=()=>{if(!t)return"text-gray-500";switch(e){case"syncing":return"text-blue-500";case"error":return"text-red-500";case"idle":return"text-green-500";default:return"text-gray-500"}};return o.jsxs("div",{className:"flex items-center gap-2 text-sm",children:[o.jsxs("div",{className:"flex items-center gap-1","aria-live":"polite",role:"status",children:[f(),o.jsx("span",{className:d(),children:r()})]}),s&&o.jsx("span",{className:"text-gray-500",children:u(s)}),n>0&&o.jsxs("span",{className:"bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs",children:[n," pending"]}),!t&&o.jsxs("button",{onClick:i,className:"flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800",title:"Queue for sync when online",children:[o.jsx(O,{className:"w-3 h-3"}),"Queue"]}),t&&o.jsxs("button",{onClick:a,className:"flex items-center gap-1 text-xs text-blue-600 hover:text-blue-800",title:"Sync now",children:[o.jsx(x,{className:"w-3 h-3"}),"Sync"]})]})};export{ee as default};
//# sourceMappingURL=SyncStatusIndicator-CTV-JR_R.js.map
