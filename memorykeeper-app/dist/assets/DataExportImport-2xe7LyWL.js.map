{"version":3,"mappings":"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","names":["exportBackupData","memories","getAllMemories","profile","getProfile","backupData","error","downloadBackupFile","filename","defaultFilename","finalFilename","blob","url","link","parseBackupData","jsonData","data","importBackupData","result","addSingleMemory","saveProfile","__vitePreload","getAllMemories2","existingMemories","existingIds","m","memory","backupService","DataExportImport","onBack","user","useAuth","addToast","useError","dispatch","useAppState","isExporting","setIsExporting","useState","isImporting","setIsImporting","importPreview","setImportPreview","fileInputRef","useRef","handleBack","handleExport","handleFileSelect","event","file","_a","text","handleImport","jsxs","jsx","ChevronLeft","Download","AlertTriangle","Fragment","Loader","Upload","CheckCircle","FileText"],"ignoreList":[],"sources":["../../src/lib/backupService.ts","../../src/components/DataExportImport.tsx"],"sourcesContent":["import { getAllMemories, getProfile } from './indexedDBService';\nimport { OfflineMemory } from './indexedDBService';\n\nexport interface BackupData {\n  memories: OfflineMemory[];\n  profile: any;\n  exportDate: string;\n  version: string;\n}\n\n/**\n * Export all user memories and profile data to JSON\n */\nexport const exportBackupData = async (): Promise<string> => {\n  try {\n    const memories = await getAllMemories();\n    const profile = await getProfile();\n\n    const backupData: BackupData = {\n      memories,\n      profile,\n      exportDate: new Date().toISOString(),\n      version: '1.0'\n    };\n\n    return JSON.stringify(backupData, null, 2);\n  } catch (error) {\n    console.error('Error exporting backup data:', error);\n    throw new Error('Failed to export backup data');\n  }\n};\n\n/**\n * Download backup data as a JSON file\n */\nexport const downloadBackupFile = async (filename?: string): Promise<void> => {\n  try {\n    const backupData = await exportBackupData();\n    const defaultFilename = `memorykeeper-backup-${new Date().toISOString().split('T')[0]}.json`;\n    const finalFilename = filename || defaultFilename;\n\n    const blob = new Blob([backupData], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = finalFilename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Error downloading backup file:', error);\n    throw new Error('Failed to download backup file');\n  }\n};\n\n/**\n * Parse backup data from JSON string\n */\nexport const parseBackupData = (jsonData: string): BackupData => {\n  try {\n    const data = JSON.parse(jsonData) as BackupData;\n\n    // Basic validation\n    if (!data.memories || !Array.isArray(data.memories)) {\n      throw new Error('Invalid backup data: memories array missing');\n    }\n\n    if (!data.exportDate) {\n      throw new Error('Invalid backup data: export date missing');\n    }\n\n    return data;\n  } catch (error) {\n    console.error('Error parsing backup data:', error);\n    throw new Error('Invalid backup file format');\n  }\n};\n\n/**\n * Import backup data with validation and conflict resolution\n */\nexport const importBackupData = async (backupData: BackupData): Promise<{\n  importedMemories: number;\n  importedProfile: boolean;\n  skippedMemories: number;\n  errors: string[];\n}> => {\n  const result = {\n    importedMemories: 0,\n    importedProfile: false,\n    skippedMemories: 0,\n    errors: [] as string[]\n  };\n\n  try {\n    const { addSingleMemory, saveProfile, getAllMemories } = await import('./indexedDBService');\n\n    // Validate backup data\n    if (!Array.isArray(backupData.memories)) {\n      result.errors.push('Invalid backup data: memories array missing');\n      return result;\n    }\n\n    // Get existing memories for conflict detection\n    const existingMemories = await getAllMemories();\n    const existingIds = new Set(existingMemories.map(m => m.id));\n\n    // Import memories with conflict resolution\n    for (const memory of backupData.memories) {\n      try {\n        // Skip if memory with this ID already exists\n        if (existingIds.has(memory.id)) {\n          result.skippedMemories++;\n          continue;\n        }\n\n        // Validate memory data\n        if (!memory.prompt || !memory.response) {\n          result.errors.push(`Invalid memory data for ID ${memory.id}`);\n          continue;\n        }\n\n        const success = await addSingleMemory(memory);\n        if (success) {\n          result.importedMemories++;\n        } else {\n          result.errors.push(`Failed to import memory \"${memory.prompt}\"`);\n        }\n      } catch (error: any) {\n        result.errors.push(`Error importing memory: ${error.message}`);\n      }\n    }\n\n    // Import profile if it exists\n    if (backupData.profile) {\n      try {\n        await saveProfile(backupData.profile);\n        result.importedProfile = true;\n      } catch (error: any) {\n        result.errors.push(`Failed to import profile: ${error.message}`);\n      }\n    }\n\n  } catch (error: any) {\n    result.errors.push(`Import failed: ${error.message}`);\n  }\n\n  return result;\n};\n\n// Export service object\nexport const backupService = {\n  exportBackupData,\n  downloadBackupFile,\n  parseBackupData,\n  importBackupData\n};","\nimport { useState, useRef, type ChangeEvent, type FC } from 'react';\nimport { Download, Upload, FileText, AlertTriangle, CheckCircle, Loader, ChevronLeft } from 'lucide-react';\nimport { useAuth } from '../lib/AuthContext';\nimport { useError } from '../lib/ErrorContext';\nimport { backupService } from '../lib/backupService';\nimport { useAppState } from '../lib/AppStateContext';\n\nconst DataExportImport: FC<{ onBack?: () => void }> = ({ onBack }) => {\n  const { user } = useAuth();\n  const { addToast } = useError();\n  const { dispatch } = useAppState();\n  const [isExporting, setIsExporting] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n  const [importPreview, setImportPreview] = useState<any>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleBack = () => {\n    if (onBack) {\n      onBack();\n    } else {\n      dispatch({ type: 'SET_DETAIL_VIEW', payload: null });\n    }\n  };\n\n  const handleExport = async () => {\n    if (!user?.id) return;\n\n    setIsExporting(true);\n    try {\n      await backupService.downloadBackupFile();\n      addToast({\n        type: 'success',\n        title: 'Backup Downloaded',\n        message: 'Your memories have been exported successfully!',\n        duration: 4000\n      });\n    } catch (error: any) {\n      console.error('Export error:', error);\n      addToast({\n        type: 'error',\n        title: 'Export Failed',\n        message: error.message || 'Failed to export your data.',\n        duration: 5000\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleFileSelect = async (event: ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.name.endsWith('.json')) {\n      addToast({\n        type: 'error',\n        title: 'Invalid File',\n        message: 'Please select a valid JSON backup file.',\n        duration: 4000\n      });\n      return;\n    }\n\n    try {\n      const text = await file.text();\n      const backupData = backupService.parseBackupData(text);\n      setImportPreview(backupData);\n    } catch (error: any) {\n      addToast({\n        type: 'error',\n        title: 'Invalid Backup File',\n        message: error.message || 'The selected file is not a valid backup.',\n        duration: 5000\n      });\n    }\n  };\n\n  const handleImport = async () => {\n    if (!importPreview) return;\n\n    setIsImporting(true);\n    try {\n      const result = await backupService.importBackupData(importPreview);\n\n      if (result.errors.length > 0) {\n        addToast({\n          type: 'warning',\n          title: 'Import Completed with Issues',\n          message: `Imported ${result.importedMemories} memories. ${result.skippedMemories} skipped. Check console for details.`,\n          duration: 6000\n        });\n        console.warn('Import errors:', result.errors);\n      } else {\n        addToast({\n          type: 'success',\n          title: 'Import Complete',\n          message: `Successfully imported ${result.importedMemories} memories${result.importedProfile ? ' and profile data' : ''}.`,\n          duration: 5000\n        });\n      }\n\n      setImportPreview(null);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    } catch (error: any) {\n      addToast({\n        type: 'error',\n        title: 'Import Failed',\n        message: error.message || 'Failed to import backup data.',\n        duration: 5000\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  return (\n    <div className=\"pt-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <button\n          onClick={handleBack}\n          className=\"w-10 h-10 bg-white/80 backdrop-blur-xl rounded-2xl flex items-center justify-center shadow-lg border border-orange-100 hover:bg-orange-50 transition-colors\"\n          aria-label=\"Go back\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">Data Management</h1>\n          <p className=\"text-sm text-gray-600\">Backup your memories or import from another device</p>\n        </div>\n      </div>\n\n      {/* Export Section */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-green-400 to-emerald-500 rounded-2xl flex items-center justify-center\">\n            <Download className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-gray-800\">Export Backup</h2>\n            <p className=\"text-sm text-gray-600\">Download all your memories and data</p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-amber-50 rounded-2xl p-4 border border-amber-200\">\n            <div className=\"flex items-start gap-3\">\n              <AlertTriangle className=\"w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-amber-800\">\n                <p className=\"font-semibold mb-1\">Important Notes:</p>\n                <ul className=\"list-disc list-inside space-y-1\">\n                  <li>Backup includes all memories, profile data, and settings</li>\n                  <li>File will be downloaded as JSON format</li>\n                  <li>Keep backups safe and private</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          <button\n            onClick={handleExport}\n            disabled={isExporting}\n            className=\"w-full flex items-center justify-center gap-3 py-4 px-6 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\n          >\n            {isExporting ? (\n              <>\n                <Loader className=\"w-5 h-5 animate-spin\" />\n                Creating Backup...\n              </>\n            ) : (\n              <>\n                <Download className=\"w-5 h-5\" />\n                Download Backup\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Import Section */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-400 to-cyan-500 rounded-2xl flex items-center justify-center\">\n            <Upload className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-xl font-bold text-gray-800\">Import Backup</h2>\n            <p className=\"text-sm text-gray-600\">Restore memories from a backup file</p>\n          </div>\n        </div>\n\n        {!importPreview ? (\n          <div className=\"space-y-4\">\n            <div className=\"border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center\">\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-600 mb-4\">Select a MemoryKeeper backup file (.json)</p>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\".json\"\n                onChange={handleFileSelect}\n                className=\"hidden\"\n              />\n              <button\n                onClick={() => fileInputRef.current?.click()}\n                className=\"py-3 px-6 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all\"\n              >\n                Choose File\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <div className=\"bg-green-50 rounded-2xl p-4 border border-green-200\">\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm text-green-800\">\n                  <p className=\"font-semibold mb-2\">Backup Preview:</p>\n                  <div className=\"space-y-1\">\n                    <p><strong>Memories:</strong> {importPreview.memories.length}</p>\n                    <p><strong>Profile:</strong> {importPreview.profile ? 'Yes' : 'No'}</p>\n                    <p><strong>Exported:</strong> {new Date(importPreview.exportDate).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-amber-50 rounded-2xl p-4 border border-amber-200\">\n              <div className=\"flex items-start gap-3\">\n                <AlertTriangle className=\"w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"text-sm text-amber-800\">\n                  <p className=\"font-semibold mb-1\">Import Warning:</p>\n                  <p>This will merge data with your existing memories. Duplicate entries will be handled automatically.</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={() => {\n                  setImportPreview(null);\n                  if (fileInputRef.current) {\n                    fileInputRef.current.value = '';\n                  }\n                }}\n                className=\"flex-1 py-3 px-6 bg-gray-200 text-gray-700 rounded-2xl font-semibold hover:bg-gray-300 transition-all\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleImport}\n                disabled={isImporting}\n                className=\"flex-1 flex items-center justify-center gap-3 py-3 px-6 bg-gradient-to-r from-blue-500 to-cyan-500 text-white rounded-2xl font-semibold shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all\"\n              >\n                {isImporting ? (\n                  <>\n                    <Loader className=\"w-5 h-5 animate-spin\" />\n                    Importing...\n                  </>\n                ) : (\n                  <>\n                    <Upload className=\"w-5 h-5\" />\n                    Import Data\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DataExportImport;\n"],"file":"assets/DataExportImport-2xe7LyWL.js"}