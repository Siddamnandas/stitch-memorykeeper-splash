{"version":3,"file":"FileUpload-DOtEzTE4.js","sources":["../../src/components/FileUpload.tsx"],"sourcesContent":["import { useState, useCallback, useRef, type FC, type ChangeEvent, type DragEvent } from 'react';\nimport { Upload, X, Image, FileText, Eye } from 'lucide-react';\nimport { useAuth } from '../lib/AuthContext';\nimport { useError } from '../lib/ErrorContext';\nimport { sanitizeFilename } from '../lib/inputSanitizer';\n\nexport interface ProcessedFileData {\n  file: File;\n  type: 'image' | 'document' | 'video';\n  preview?: string;\n  textContent?: string;\n  metadata: {\n    name: string;\n    size: number;\n    lastModified: number;\n    type: string;\n  };\n}\n\ninterface FileUploadProps {\n  onFileProcessed: (fileData: ProcessedFileData) => void;\n  acceptedTypes?: string[];\n  maxFileSize?: number; // in MB\n  multiple?: boolean;\n}\n\nconst FileUpload: FC<FileUploadProps> = ({\n  onFileProcessed,\n  acceptedTypes = ['image/*', '.pdf', '.txt'],\n  maxFileSize = 10, // 10MB default\n  multiple = false\n}) => {\n  const { user } = useAuth();\n  const { addToast } = useError();\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processedFiles, setProcessedFiles] = useState<ProcessedFileData[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const maxFileSizeBytes = maxFileSize * 1024 * 1024;\n\n  const validateFile = (file: File): string | null => {\n    if (file.size > maxFileSizeBytes) {\n      return `File size exceeds ${maxFileSize}MB limit`;\n    }\n\n    const isValidType = acceptedTypes.some(type => {\n      if (type.startsWith('.')) {\n        return file.name.toLowerCase().endsWith(type.toLowerCase());\n      }\n      if (type.includes('*')) {\n        const baseType = type.split('/')[0];\n        return file.type.startsWith(baseType);\n      }\n      return file.type === type;\n    });\n\n    if (!isValidType) {\n      return `File type not supported. Accepted types: ${acceptedTypes.join(', ')}`;\n    }\n\n    return null;\n  };\n\n  const processFile = async (file: File): Promise<ProcessedFileData | null> => {\n    const validationError = validateFile(file);\n    if (validationError) {\n      addToast({\n        type: 'error',\n        title: 'Invalid File',\n        message: validationError,\n        duration: 4000\n      });\n      return null;\n    }\n\n    const detectedType: ProcessedFileData['type'] =\n      file.type.startsWith('image/')\n        ? 'image'\n        : file.type.startsWith('video/')\n        ? 'video'\n        : 'document';\n\n    const fileData: ProcessedFileData = {\n      file,\n      type: detectedType,\n      metadata: {\n        name: sanitizeFilename(file.name),\n        size: file.size,\n        lastModified: file.lastModified,\n        type: file.type\n      }\n    };\n\n  // Process image files\n  if (fileData.type === 'image') {\n    try {\n      const preview = await createImagePreview(file);\n      fileData.preview = preview;\n    } catch (error) {\n      console.error('Error creating image preview:', error);\n    }\n  }\n\n  if (fileData.type === 'video') {\n    try {\n      const preview = await createImagePreview(file);\n      fileData.preview = preview;\n    } catch (error) {\n      console.error('Error creating video preview:', error);\n    }\n  }\n\n    // Process text-based documents\n    if (file.type === 'text/plain' || file.name.toLowerCase().endsWith('.txt')) {\n      try {\n        const textContent = await readTextFile(file);\n        fileData.textContent = textContent;\n      } catch (error) {\n        console.error('Error reading text file:', error);\n      }\n    }\n\n    return fileData;\n  };\n\n  const createImagePreview = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        if (result) {\n          resolve(result);\n        } else {\n          reject(new Error('Failed to create image preview'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read image file'));\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const readTextFile = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        if (result) {\n          resolve(result);\n        } else {\n          reject(new Error('Failed to read text file'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read text file'));\n      reader.readAsText(file);\n    });\n  };\n\n  const handleFiles = useCallback(async (files: FileList) => {\n    if (!user?.id) {\n      addToast({\n        type: 'error',\n        title: 'Authentication Required',\n        message: 'Please sign in to upload files.',\n        duration: 4000\n      });\n      return;\n    }\n\n    const fileArray = Array.from(files);\n    setIsProcessing(true);\n\n    const processedResults: ProcessedFileData[] = [];\n\n    for (const file of fileArray) {\n      try {\n        const processedFile = await processFile(file);\n        if (processedFile) {\n          processedResults.push(processedFile);\n        }\n      } catch (error) {\n        console.error('Error processing file:', error);\n        addToast({\n          type: 'error',\n          title: 'Processing Error',\n          message: `Failed to process ${file.name}`,\n          duration: 4000\n        });\n      }\n    }\n\n    setIsProcessing(false);\n\n    if (processedResults.length > 0) {\n      if (multiple) {\n        setProcessedFiles(prev => [...prev, ...processedResults]);\n      } else {\n        setProcessedFiles([processedResults[0]]);\n      }\n\n      processedResults.forEach(fileData => {\n        onFileProcessed(fileData);\n      });\n\n      addToast({\n        type: 'success',\n        title: 'Files Processed',\n        message: `Successfully processed ${processedResults.length} file(s).`,\n        duration: 3000\n      });\n    }\n  }, [user?.id, multiple, onFileProcessed, addToast]);\n\n  const handleDrop = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n\n    const files = e.dataTransfer.files;\n    if (files.length > 0) {\n      handleFiles(files);\n    }\n  }, [handleFiles]);\n\n  const handleDragOver = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleFileInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFiles(files);\n    }\n  }, [handleFiles]);\n\n  const removeFile = (index: number) => {\n    setProcessedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Drop zone */}\n      <div\n        className={`border-2 border-dashed rounded-2xl p-8 text-center transition-all ${\n          isDragOver\n            ? 'border-orange-400 bg-orange-50'\n            : 'border-gray-300 bg-white/80 backdrop-blur-xl'\n        }`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n      >\n        <input\n          type=\"file\"\n          ref={fileInputRef}\n          className=\"hidden\"\n          accept={acceptedTypes.join(',')}\n          multiple={multiple}\n          onChange={handleFileInputChange}\n        />\n        \n        <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">\n          Drag & drop files here\n        </h3>\n        <p className=\"text-gray-500 mb-4\">\n          or{' '}\n          <button\n            type=\"button\"\n            className=\"text-orange-600 hover:text-orange-700 font-medium\"\n            onClick={() => fileInputRef.current?.click()}\n          >\n            browse files\n          </button>\n        </p>\n        <p className=\"text-sm text-gray-400\">\n          Accepted types: {acceptedTypes.join(', ')} | Max size: {maxFileSize}MB\n        </p>\n      </div>\n\n      {/* Processing indicator */}\n      {isProcessing && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-2xl p-4 flex items-center gap-3\">\n          <div className=\"w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\n          <span className=\"text-blue-700\">Processing files...</span>\n        </div>\n      )}\n\n      {/* Processed files */}\n      {processedFiles.length > 0 && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-2xl p-4 border border-orange-100\">\n          <h3 className=\"font-semibold text-gray-800 mb-3\">Uploaded Files</h3>\n          <div className=\"space-y-3\">\n            {processedFiles.map((fileData, index) => (\n              <div key={index} className=\"flex items-center gap-3 p-3 bg-orange-50 rounded-xl\">\n                <div className=\"w-10 h-10 rounded-lg flex items-center justify-center bg-white\">\n                  {fileData.type === 'image' ? (\n                    <Image className=\"w-5 h-5 text-orange-600\" />\n                  ) : (\n                    <FileText className=\"w-5 h-5 text-orange-600\" />\n                  )}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"font-medium text-gray-800 truncate\">{fileData.metadata.name}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    {(fileData.metadata.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {fileData.preview && (\n                    <button className=\"p-2 text-gray-500 hover:text-gray-700\">\n                      <Eye className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                  <button\n                    onClick={() => removeFile(index)}\n                    className=\"p-2 text-gray-500 hover:text-red-500\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"names":["FileUpload","onFileProcessed","acceptedTypes","maxFileSize","multiple","user","useAuth","addToast","useError","isDragOver","setIsDragOver","useState","isProcessing","setIsProcessing","processedFiles","setProcessedFiles","fileInputRef","useRef","maxFileSizeBytes","validateFile","file","type","baseType","processFile","validationError","detectedType","fileData","sanitizeFilename","preview","createImagePreview","error","textContent","readTextFile","resolve","reject","reader","e","result","_a","handleFiles","useCallback","files","fileArray","processedResults","processedFile","prev","handleDrop","handleDragOver","handleDragLeave","handleFileInputChange","removeFile","index","_","i","jsxs","jsx","Upload","Image","FileText","Eye","X"],"mappings":"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"}