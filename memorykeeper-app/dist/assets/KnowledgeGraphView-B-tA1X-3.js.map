{"version":3,"file":"KnowledgeGraphView-B-tA1X-3.js","sources":["../../src/components/KnowledgeGraphView.tsx"],"sourcesContent":["import React from 'react';\nimport { ChevronLeft, Network, Search, Filter, ZoomIn, ZoomOut, RotateCcw, Share, Download } from 'lucide-react';\nimport { useState, useEffect, useRef } from 'react';\nimport { useAppState } from '../lib/AppStateContext';\nimport { useError } from '../lib/ErrorContext';\nimport { analyzeMemoryConnection, extractMemoryKeywords, analyzeMemorySentiment } from '../lib/aiService';\n\ninterface MemoryNode {\n  id: string;\n  x: number;\n  y: number;\n  memory: any;\n  connections: string[];\n  color: string;\n  keywords?: string[];\n  sentiment?: 'positive' | 'negative' | 'neutral';\n}\n\ninterface Connection {\n  from: string;\n  to: string;\n  strength: number;\n  type: 'temporal' | 'thematic' | 'emotional' | 'keyword' | 'none';\n}\n\nconst KnowledgeGraphView: React.FC<{ onBack: () => void }> = ({ onBack }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [nodes, setNodes] = useState<MemoryNode[]>([]);\n  const [connections, setConnections] = useState<Connection[]>([]);\n  const [selectedNode, setSelectedNode] = useState<MemoryNode | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragNode, setDragNode] = useState<MemoryNode | null>(null);\n  const [zoom, setZoom] = useState(1);\n  const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const { state } = useAppState();\n  const { addToast } = useError();\n\n  // Color palette for different memory themes\n  const colorPalette = [\n    '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8',\n    '#F7DC6F', '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA'\n  ];\n\n  // Generate knowledge graph from memories\n  useEffect(() => {\n    if (state.memories.length === 0) return;\n\n    generateGraph();\n  }, [state.memories]);\n\n  const generateGraph = async () => {\n    setIsAnalyzing(true);\n    const newNodes: MemoryNode[] = [];\n    const newConnections: Connection[] = [];\n\n    // Create nodes for each memory with AI analysis\n    for (let i = 0; i < state.memories.length; i++) {\n      const memory: any = state.memories[i];\n      const angle = (i / state.memories.length) * 2 * Math.PI;\n      const radius = Math.min(300, state.memories.length * 30);\n      const x = Math.cos(angle) * radius + 400;\n      const y = Math.sin(angle) * radius + 300;\n\n      // AI analyze memory for keywords and sentiment\n      let keywords: string[] = [];\n      let sentiment: 'positive' | 'negative' | 'neutral' = 'neutral';\n      \n      try {\n        const keywordResult = await extractMemoryKeywords(memory);\n        if (keywordResult.success && keywordResult.keywords) {\n          keywords = keywordResult.keywords;\n        }\n        \n        const sentimentResult = await analyzeMemorySentiment(memory);\n        if (sentimentResult.success && sentimentResult.sentiment) {\n          sentiment = sentimentResult.sentiment;\n        }\n      } catch (error) {\n        console.warn('Failed to analyze memory with AI:', error);\n      }\n\n      newNodes.push({\n        id: memory.id || `memory-${i}`,\n        x,\n        y,\n        memory,\n        connections: [],\n        color: colorPalette[i % colorPalette.length],\n        keywords,\n        sentiment\n      });\n    }\n\n    // Create connections based on AI analysis\n    for (let i = 0; i < newNodes.length; i++) {\n      for (let j = i + 1; j < newNodes.length; j++) {\n        const connection = await analyzeConnection(newNodes[i], newNodes[j]);\n        if (connection && connection.type !== 'none' && connection.strength > 20) {\n          newConnections.push(connection);\n          newNodes[i].connections.push(newNodes[j].id);\n          newNodes[j].connections.push(newNodes[i].id);\n        }\n      }\n    }\n\n    setNodes(newNodes);\n    setConnections(newConnections);\n    setIsAnalyzing(false);\n  };\n\n  const analyzeConnection = async (nodeA: MemoryNode, nodeB: MemoryNode): Promise<Connection | null> => {\n    try {\n      const result = await analyzeMemoryConnection(nodeA.memory, nodeB.memory);\n      \n      if (result.success && result.connectionType && result.strength) {\n        return {\n          from: nodeA.id,\n          to: nodeB.id,\n          strength: result.strength / 100, // Normalize to 0-1\n          type: result.connectionType as 'temporal' | 'thematic' | 'emotional' | 'keyword' | 'none'\n        };\n      }\n      \n      // Fallback to basic connection analysis\n      return analyzeConnectionBasic(nodeA, nodeB);\n    } catch (error) {\n      console.warn('AI connection analysis failed, using basic analysis:', error);\n      return analyzeConnectionBasic(nodeA, nodeB);\n    }\n  };\n\n  const analyzeConnectionBasic = (nodeA: MemoryNode, nodeB: MemoryNode): Connection | null => {\n    const memoryA = nodeA.memory;\n    const memoryB = nodeB.memory;\n\n    // Check temporal connection (same date or close dates)\n    const dateA = new Date(memoryA.date || memoryA.created_at);\n    const dateB = new Date(memoryB.date || memoryB.created_at);\n    const dateDiff = Math.abs(dateA.getTime() - dateB.getTime());\n    const daysDiff = dateDiff / (1000 * 60 * 60 * 24);\n\n    if (daysDiff <= 7) { // Within a week\n      return {\n        from: nodeA.id,\n        to: nodeB.id,\n        strength: Math.max(0.3, 1 - daysDiff / 7),\n        type: 'temporal'\n      };\n    }\n\n    // Check keyword connections\n    if (nodeA.keywords && nodeB.keywords) {\n      const commonKeywords = nodeA.keywords.filter(k => nodeB.keywords?.includes(k));\n      if (commonKeywords.length > 0) {\n        return {\n          from: nodeA.id,\n          to: nodeB.id,\n          strength: Math.min(1, commonKeywords.length * 0.2),\n          type: 'keyword'\n        };\n      }\n    }\n\n    // Check thematic connections (similar emotional tone)\n    if (nodeA.sentiment && nodeB.sentiment && \n        nodeA.sentiment === nodeB.sentiment && \n        nodeA.sentiment !== 'neutral') {\n      return {\n        from: nodeA.id,\n        to: nodeB.id,\n        strength: 0.4,\n        type: 'emotional'\n      };\n    }\n\n    return null;\n  };\n\n  // Canvas rendering\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Save context for transformations\n    ctx.save();\n    ctx.translate(panOffset.x, panOffset.y);\n    ctx.scale(zoom, zoom);\n\n    // Draw connections\n    connections.forEach((connection: Connection) => {\n      const fromNode = nodes.find((n: MemoryNode) => n.id === connection.from);\n      const toNode = nodes.find((n: MemoryNode) => n.id === connection.to);\n\n      if (fromNode && toNode) {\n        ctx.beginPath();\n        ctx.moveTo(fromNode.x, fromNode.y);\n        ctx.lineTo(toNode.x, toNode.y);\n\n        // Connection styling based on type\n        switch (connection.type) {\n          case 'temporal':\n            ctx.strokeStyle = '#3B82F6';\n            ctx.lineWidth = 2;\n            break;\n          case 'keyword':\n            ctx.strokeStyle = '#10B981';\n            ctx.lineWidth = 2;\n            break;\n          case 'emotional':\n            ctx.strokeStyle = '#F59E0B';\n            ctx.lineWidth = 2;\n            break;\n          case 'thematic':\n            ctx.strokeStyle = '#8B5CF6';\n            ctx.lineWidth = 2;\n            break;\n          default:\n            ctx.strokeStyle = '#6B7280';\n            ctx.lineWidth = 1;\n        }\n\n        ctx.globalAlpha = connection.strength * 0.6;\n        ctx.stroke();\n        ctx.globalAlpha = 1;\n      }\n    });\n\n    // Draw nodes\n    nodes.forEach((node: MemoryNode) => {\n      if (searchTerm && !node.memory.prompt.toLowerCase().includes(searchTerm.toLowerCase()) &&\n          !node.memory.response.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return;\n      }\n\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, 25, 0, 2 * Math.PI);\n\n      // Node styling\n      if (selectedNode?.id === node.id) {\n        ctx.fillStyle = '#FFFFFF';\n        ctx.strokeStyle = node.color;\n        ctx.lineWidth = 3;\n      } else {\n        ctx.fillStyle = node.color;\n        ctx.strokeStyle = '#FFFFFF';\n        ctx.lineWidth = 2;\n      }\n\n      ctx.fill();\n      ctx.stroke();\n\n      // Draw node label (first few words)\n      ctx.fillStyle = '#1F2937';\n      ctx.font = '12px system-ui';\n      ctx.textAlign = 'center';\n      const label = node.memory.prompt.length > 20\n        ? node.memory.prompt.substring(0, 17) + '...'\n        : node.memory.prompt;\n      ctx.fillText(label, node.x, node.y + 40);\n    });\n\n    ctx.restore();\n  }, [nodes, connections, selectedNode, zoom, panOffset, searchTerm]);\n\n  const handleCanvasClick = (event: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const x = (event.clientX - rect.left - panOffset.x) / zoom;\n    const y = (event.clientY - rect.top - panOffset.y) / zoom;\n\n    // Check if clicked on a node\n    const clickedNode = nodes.find((node: MemoryNode) => {\n      const distance = Math.sqrt((node.x - x) ** 2 + (node.y - y) ** 2);\n      return distance <= 25;\n    });\n\n    if (clickedNode) {\n      setSelectedNode(clickedNode);\n    } else {\n      setSelectedNode(null);\n    }\n  };\n\n  const resetView = () => {\n    setZoom(1);\n    setPanOffset({ x: 0, y: 0 });\n  };\n\n  const handleExport = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const link = document.createElement('a');\n    link.download = `memory-knowledge-graph-${Date.now()}.png`;\n    link.href = canvas.toDataURL();\n    link.click();\n\n    addToast({\n      type: 'success',\n      title: 'Graph Exported!',\n      message: 'Knowledge graph has been saved to your device.',\n      duration: 3000\n    });\n  };\n\n  return (\n    <div className=\"pt-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <button\n          onClick={onBack}\n          className=\"w-10 h-10 bg-white/80 backdrop-blur-xl rounded-2xl flex items-center justify-center shadow-lg border border-orange-100\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <h1 className=\"text-2xl font-bold text-gray-800\">Memory Connections</h1>\n      </div>\n\n      {/* Controls */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100 mb-6\">\n        <div className=\"flex flex-wrap gap-4 items-center justify-between mb-4\">\n          {/* Search */}\n          <div className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5 text-gray-500\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search memories...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"px-3 py-2 bg-orange-50/50 rounded-xl border border-orange-200 focus:border-orange-400 outline-none\"\n            />\n          </div>\n\n          {/* Filter */}\n          <div className=\"flex items-center gap-2\">\n            <Filter className=\"w-5 h-5 text-gray-500\" />\n            <select\n              value={filterType}\n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"px-3 py-2 bg-orange-50/50 rounded-xl border border-orange-200 focus:border-orange-400 outline-none\"\n            >\n              <option value=\"all\">All Connections</option>\n              <option value=\"temporal\">Time-based</option>\n              <option value=\"keyword\">Keyword-based</option>\n              <option value=\"emotional\">Emotional</option>\n              <option value=\"thematic\">Thematic</option>\n            </select>\n          </div>\n\n          {/* View Controls */}\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setZoom(Math.min(zoom * 1.2, 3))}\n              className=\"p-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors\"\n            >\n              <ZoomIn className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={() => setZoom(Math.max(zoom / 1.2, 0.3))}\n              className=\"p-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors\"\n            >\n              <ZoomOut className=\"w-4 h-4\" />\n            </button>\n            <button\n              onClick={resetView}\n              className=\"p-2 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-colors\"\n            >\n              <RotateCcw className=\"w-4 h-4\" />\n            </button>\n          </div>\n\n          {/* Export */}\n          <button\n            onClick={handleExport}\n            className=\"flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors\"\n          >\n            <Download className=\"w-4 h-4\" />\n            <span>Export</span>\n          </button>\n        </div>\n\n        {/* Legend */}\n        <div className=\"flex flex-wrap gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-1 bg-blue-500 rounded\"></div>\n            <span>Time-based connections</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-1 bg-green-500 rounded\"></div>\n            <span>Keyword connections</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-1 bg-yellow-500 rounded\"></div>\n            <span>Emotional connections</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-1 bg-purple-500 rounded\"></div>\n            <span>Thematic connections</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Loading indicator */}\n      {isAnalyzing && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100 mb-6 text-center\">\n          <div className=\"flex items-center justify-center gap-3\">\n            <div className=\"w-5 h-5 border-2 border-orange-500 border-t-transparent rounded-full animate-spin\"></div>\n            <span>Analyzing memories with AI...</span>\n          </div>\n        </div>\n      )}\n\n      {/* Graph Canvas */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100 mb-6\">\n        <canvas\n          ref={canvasRef}\n          width={800}\n          height={600}\n          className=\"border border-gray-200 rounded-xl cursor-pointer bg-gray-50\"\n          onClick={handleCanvasClick}\n        />\n      </div>\n\n      {/* Selected Memory Details */}\n      {selectedNode && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n          <div className=\"flex items-start gap-4\">\n            <div\n              className=\"w-12 h-12 rounded-2xl flex-shrink-0\"\n              style={{ backgroundColor: selectedNode.color }}\n            />\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-bold text-gray-800 mb-2\">{selectedNode.memory.prompt}</h3>\n              <p className=\"text-gray-600 mb-3\">{selectedNode.memory.response}</p>\n              <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                <span>📅 {new Date(selectedNode.memory.date || selectedNode.memory.created_at).toLocaleDateString()}</span>\n                <span>🔗 {selectedNode.connections.length} connections</span>\n                {selectedNode.sentiment && (\n                  <span>😊 Sentiment: {selectedNode.sentiment}</span>\n                )}\n              </div>\n\n              {/* Keywords */}\n              {selectedNode.keywords && selectedNode.keywords.length > 0 && (\n                <div className=\"mt-3\">\n                  <h4 className=\"font-semibold text-gray-700 mb-1\">Keywords:</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedNode.keywords.map((keyword, index) => (\n                      <span key={index} className=\"px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-xs\">\n                        {keyword}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Connection details */}\n              {selectedNode.connections.length > 0 && (\n                <div className=\"mt-4\">\n                  <h4 className=\"font-semibold text-gray-700 mb-2\">Connected Memories:</h4>\n                  <div className=\"space-y-2\">\n                    {selectedNode.connections.slice(0, 3).map((connectionId: string) => {\n                      const connectedNode = nodes.find((n: MemoryNode) => n.id === connectionId);\n                      if (!connectedNode) return null;\n\n                      const connection = connections.find(\n                        (c: Connection) => (c.from === selectedNode.id && c.to === connectionId) ||\n                             (c.from === connectionId && c.to === selectedNode.id)\n                      );\n\n                      return (\n                        <div key={connectionId} className=\"flex items-center gap-2 text-sm\">\n                          <div\n                            className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                            style={{ backgroundColor: connectedNode.color }}\n                          />\n                          <span className=\"text-gray-600 truncate\">{connectedNode.memory.prompt}</span>\n                          <span className=\"text-xs text-gray-400 ml-auto\">\n                            {connection?.type} ({Math.round((connection?.strength || 0) * 100)}%)\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {nodes.length === 0 && !isAnalyzing && (\n        <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-8 shadow-xl border border-orange-100 text-center\">\n          <Network className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-xl font-bold text-gray-800 mb-2\">No Memories to Connect</h3>\n          <p className=\"text-gray-600\">\n            Add some memories first to see how they connect and form your personal knowledge graph.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default KnowledgeGraphView;"],"names":["KnowledgeGraphView","onBack","canvasRef","useRef","nodes","setNodes","useState","connections","setConnections","selectedNode","setSelectedNode","isDragging","setIsDragging","dragNode","setDragNode","zoom","setZoom","panOffset","setPanOffset","searchTerm","setSearchTerm","filterType","setFilterType","isAnalyzing","setIsAnalyzing","state","useAppState","addToast","useError","colorPalette","useEffect","generateGraph","newNodes","newConnections","i","memory","angle","radius","x","y","keywords","sentiment","keywordResult","extractMemoryKeywords","sentimentResult","analyzeMemorySentiment","error","j","connection","analyzeConnection","nodeA","nodeB","result","analyzeMemoryConnection","analyzeConnectionBasic","memoryA","memoryB","dateA","dateB","daysDiff","commonKeywords","_a","k","canvas","ctx","fromNode","n","toNode","node","label","handleCanvasClick","event","rect","clickedNode","resetView","handleExport","link","jsxs","jsx","ChevronLeft","Search","e","Filter","ZoomIn","ZoomOut","RotateCcw","Download","keyword","index","connectionId","connectedNode","c","Network"],"mappings":"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"}