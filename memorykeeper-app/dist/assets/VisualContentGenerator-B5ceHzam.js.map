{"version":3,"file":"VisualContentGenerator-B5ceHzam.js","sources":["../../src/components/VisualContentGenerator.tsx"],"sourcesContent":["import { useState, type FC } from 'react';\nimport { ChevronLeft, Image as ImageIcon, Sparkles, Download, Share, Heart } from 'lucide-react';\nimport { generateMemoryImage } from '../lib/aiService';\nimport { useAppState } from '../lib/AppStateContext';\nimport { useError } from '../lib/ErrorContext';\n\nconst VisualContentGenerator: FC<{ onBack: () => void }> = ({ onBack }) => {\n  const [selectedMemory, setSelectedMemory] = useState<any>(null);\n  const [generatedImage, setGeneratedImage] = useState<string | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [customPrompt, setCustomPrompt] = useState('');\n  const { state } = useAppState();\n  const { addToast } = useError();\n\n  const handleGenerateImage = async () => {\n    if (!selectedMemory && !customPrompt.trim()) {\n      addToast({\n        type: 'warning',\n        title: 'Missing Content',\n        message: 'Please select a memory or enter a custom prompt.',\n        duration: 3000\n      });\n      return;\n    }\n\n    setIsGenerating(true);\n    setGeneratedImage(null);\n\n    try {\n      const promptToUse = selectedMemory\n        ? `Create a visual representation for this memory: \"${selectedMemory.prompt}\" - ${selectedMemory.response}`\n        : customPrompt.trim();\n\n      // Create a mock memory object for the API\n      const mockMemory = {\n        prompt: selectedMemory?.prompt || 'Custom Visual',\n        response: promptToUse,\n        date: new Date().toISOString(),\n        type: 'text',\n        tags: ['visual', 'ai-generated']\n      };\n\n      const result = await generateMemoryImage(mockMemory);\n\n      if (result.success && result.imageUrl) {\n        setGeneratedImage(result.imageUrl);\n        addToast({\n          type: 'success',\n          title: 'Visual Created!',\n          message: 'Your AI-generated visual is ready.',\n          duration: 4000\n        });\n      } else {\n        addToast({\n          type: 'error',\n          title: 'Generation Failed',\n          message: result.error || 'Could not generate visual. Please try again.',\n          duration: 5000\n        });\n      }\n    } catch (error) {\n      console.error('Error generating visual:', error);\n      addToast({\n        type: 'error',\n        title: 'Generation Error',\n        message: 'An unexpected error occurred while creating your visual.',\n        duration: 5000\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleDownload = async () => {\n    if (!generatedImage) return;\n\n    try {\n      // Create download link\n      const link = document.createElement('a');\n      link.href = generatedImage;\n      link.download = `memory-visual-${Date.now()}.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      addToast({\n        type: 'success',\n        title: 'Downloaded!',\n        message: 'Visual saved to your device.',\n        duration: 3000\n      });\n    } catch (error) {\n      addToast({\n        type: 'error',\n        title: 'Download Failed',\n        message: 'Could not download the visual.',\n        duration: 4000\n      });\n    }\n  };\n\n  const handleShare = async () => {\n    if (!generatedImage) return;\n\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: 'MemoryKeeper Visual',\n          text: 'Check out this AI-generated visual from my memory!',\n          url: generatedImage\n        });\n      } else {\n        // Fallback: copy to clipboard\n        await navigator.clipboard.writeText(generatedImage);\n        addToast({\n          type: 'success',\n          title: 'Copied!',\n          message: 'Image URL copied to clipboard.',\n          duration: 3000\n        });\n      }\n    } catch (error) {\n      addToast({\n        type: 'warning',\n        title: 'Share Unavailable',\n        message: 'Sharing is not supported on this device.',\n        duration: 4000\n      });\n    }\n  };\n\n  return (\n    <div className=\"pt-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <button\n          onClick={onBack}\n          className=\"w-10 h-10 bg-white/80 backdrop-blur-xl rounded-2xl flex items-center justify-center shadow-lg border border-orange-100\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <h1 className=\"text-2xl font-bold text-gray-800\">Visual Generator</h1>\n      </div>\n\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100 mb-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center\">\n            <ImageIcon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"font-bold text-gray-800\">AI Visual Creator</h2>\n            <p className=\"text-sm text-gray-500\">Transform memories into beautiful visuals</p>\n          </div>\n        </div>\n\n        <p className=\"mb-6 text-gray-600\">\n          Create stunning AI-generated visuals from your cherished memories. Select a memory or describe what you'd like to visualize.\n        </p>\n\n        {/* Memory Selection */}\n        <div className=\"mb-6\">\n          <label className=\"block text-lg font-medium mb-3 text-gray-800\">Select a Memory (Optional):</label>\n          <div className=\"max-h-40 overflow-y-auto bg-orange-50/50 rounded-2xl p-3 mb-4\">\n            {state.memories.length > 0 ? (\n              state.memories.slice(0, 5).map((memory: any, index: number) => (\n                <button\n                  key={memory.id || index}\n                  onClick={() => {\n                    setSelectedMemory(memory);\n                    setCustomPrompt('');\n                  }}\n                  className={`w-full text-left p-3 rounded-xl mb-2 transition-all ${\n                    selectedMemory?.id === memory.id\n                      ? 'bg-orange-200 border-2 border-orange-400'\n                      : 'bg-white/80 hover:bg-orange-100'\n                  }`}\n                >\n                  <div className=\"font-medium text-gray-800 truncate\">{memory.prompt}</div>\n                  <div className=\"text-sm text-gray-600 truncate\">{memory.response}</div>\n                </button>\n              ))\n            ) : (\n              <div className=\"text-center py-6 text-gray-500\">\n                <ImageIcon className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                <p>No memories available. You can still create visuals with custom prompts!</p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"text-center mb-4\">\n            <span className=\"text-sm text-gray-500\">OR</span>\n          </div>\n\n          {/* Custom Prompt */}\n          <div>\n            <label className=\"block text-lg font-medium mb-2 text-gray-800\">Custom Prompt:</label>\n            <textarea\n              value={customPrompt}\n              onChange={(e) => {\n                setCustomPrompt(e.target.value);\n                if (e.target.value.trim()) {\n                  setSelectedMemory(null);\n                }\n              }}\n              placeholder=\"Describe the visual you'd like to create...\"\n              className=\"w-full h-24 p-4 bg-orange-50/50 rounded-2xl border border-orange-200 focus:border-orange-400 focus:ring-2 focus:ring-orange-200/50 outline-none resize-none transition-all\"\n            />\n          </div>\n        </div>\n\n        {/* Generate Button */}\n        <button\n          onClick={handleGenerateImage}\n          disabled={isGenerating || (!selectedMemory && !customPrompt.trim())}\n          className=\"w-full py-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold rounded-2xl shadow-lg hover:shadow-xl transition-all flex items-center justify-center gap-2 disabled:opacity-50 mb-6\"\n        >\n          {isGenerating ? (\n            <>\n              <div className=\"w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n              <span>Creating Visual...</span>\n            </>\n          ) : (\n            <>\n              <Sparkles className=\"w-6 h-6\" />\n              <span>Generate Visual</span>\n            </>\n          )}\n        </button>\n\n        {/* Generated Image Display */}\n        {generatedImage && (\n          <div className=\"bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-6 border border-purple-200\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"text-xl font-bold text-gray-800 mb-2\">âœ¨ Your AI-Generated Visual</h3>\n              <p className=\"text-gray-600\">A beautiful representation of your memory</p>\n            </div>\n\n            <div className=\"flex justify-center mb-6\">\n              <img\n                src={generatedImage}\n                alt=\"AI Generated Visual\"\n                className=\"max-w-full max-h-96 rounded-2xl shadow-lg border border-purple-200\"\n              />\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3 justify-center\">\n              <button\n                onClick={handleDownload}\n                className=\"flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-all shadow-lg\"\n              >\n                <Download className=\"w-5 h-5\" />\n                <span>Download</span>\n              </button>\n\n              <button\n                onClick={handleShare}\n                className=\"flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-all shadow-lg\"\n              >\n                <Share className=\"w-5 h-5\" />\n                <span>Share</span>\n              </button>\n\n              <button\n                onClick={() => {\n                  addToast({\n                    type: 'success',\n                    title: 'Saved to Favorites!',\n                    message: 'Visual added to your memory collection.',\n                    duration: 3000\n                  });\n                }}\n                className=\"flex items-center gap-2 px-6 py-3 bg-pink-500 text-white rounded-xl hover:bg-pink-600 transition-all shadow-lg\"\n              >\n                <Heart className=\"w-5 h-5\" />\n                <span>Save</span>\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Tips Section */}\n      <div className=\"bg-white/80 backdrop-blur-xl rounded-3xl p-6 shadow-xl border border-orange-100\">\n        <h3 className=\"text-lg font-bold text-gray-800 mb-3\">ðŸ’¡ Visual Creation Tips</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n          <div>\n            <h4 className=\"font-semibold text-gray-800 mb-2\">For Memories:</h4>\n            <ul className=\"space-y-1\">\n              <li>â€¢ Focus on emotional moments</li>\n              <li>â€¢ Include sensory details</li>\n              <li>â€¢ Describe the atmosphere</li>\n              <li>â€¢ Mention significant objects</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-gray-800 mb-2\">Custom Prompts:</h4>\n            <ul className=\"space-y-1\">\n              <li>â€¢ Be specific about style</li>\n              <li>â€¢ Include color preferences</li>\n              <li>â€¢ Mention artistic influences</li>\n              <li>â€¢ Describe mood and lighting</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VisualContentGenerator;\n"],"names":["VisualContentGenerator","onBack","selectedMemory","setSelectedMemory","useState","generatedImage","setGeneratedImage","isGenerating","setIsGenerating","customPrompt","setCustomPrompt","state","useAppState","addToast","useError","handleGenerateImage","promptToUse","mockMemory","result","generateMemoryImage","error","handleDownload","link","handleShare","jsxs","jsx","ChevronLeft","ImageIcon","memory","index","e","Fragment","Sparkles","Download","Share","Heart"],"mappings":"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"}